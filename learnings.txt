- From to run a solo python file
    `python3 filename.py`

- To check the current python version in use
    `python3 --version`

- To view the list of dependencies/libraries ina python project run the below command
    `pip3 freeze`

- To exclude globaly installed python dependencies/libraries from a project. You will need to create a Virtual Environment with venv
    - Create a Virtual Environment in the project directory run the below command
        `python3 -m venv ./venv`

    - To activate the already created Virtual Environment
        - On Mac
            `source ./venv/bin/activate`
        - On Windows
            `python ./venv/Scripts/activate.bat` or `./venv/Scripts/activate.bat`

        (The path is a way of specifying which of your folders/project you need a Virtual Environment)
        if the path above don't work, do the absolute path e.g (c:/user/.../project_name/venv)

    - To delete a Virtual Environment, run the below command
        `deactivate`

    - PS: Ones Virtual Environment is activated you can run all commands with `pip3` as `pip` and `python3` as `python`
        e.g `python --version` will work

- To install Django
    - When using venv
        `pip install django`
    - When venv is not in use and python 3 upwards is installed in your PC
        `pip3 install django`

 - To get instruction on what django has out of the box, run
    `django-admin help`

- To start django project
    `django-admin startproject btre .` (The dot is for current directory)

- To get the list of commands that is supported in your django-admin project run
(DO NOT MODIFY YOUR `manage.py` file as it is a configuration file used inplace of Django Admin (since we currently are not using django admin for our project))
    `python manage.py help`

- To run your server, django project, locally
    `python manage.py runserver`

- Before you deploy your application, ensure to change `DEBUG = False` in `settings.py` only use `True` when running app locally

- `ALLOWED_HOSTS` in `settings.py` should list the domain name for your application

- To create pages in your Django app, run
    `python manage.py startapp pages`

- To create any static folder in your application which has been configured in `settings.py` and dumped in project namespace folder;
  run the below code
    `python manage.py collectstatic` (this create a static folder in your root directory)
    ENSURE TO ADD THE STATIC FOLDER GENERATED BY YOUR CODE ON THE ROOT DIRECTORY TO GITIGNORE

- To create pages/feature in your Django app, run
    `python manage.py startapp listings`

- If you newly installed
    - POSTGRESS APP from; https://postgresapp.com/downloads.html
        - initialize the application
        - click on 'postgres' (this inturn opens a terminal)
        - on the terminal run 
            - \password postgres
            - click enter and insert new password
        - create database using the below command
            `CREATE DATABASE DB_NAME OWNER postgres;` (the postgres is the name you just set password for when you typed `\password postgres`)
        - To get the list of databases (in the same postgres console/terminal) run
            `\l`
        - To exit the postgres terminal, run
            `\q`
    - POSTGRESS ADMIN from; https://www.pgadmin.org/
        - follow the installation wiszard
