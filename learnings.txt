- From to run a solo python file
    `python3 filename.py`

- To check the current python version in use
    `python3 --version`

- To view the list of dependencies/libraries ina python project run the below command
    `pip3 freeze`

- To exclude globaly installed python dependencies/libraries from a project. You will need to create a Virtual Environment with venv
    - Create a Virtual Environment in the project directory run the below command
        `python3 -m venv ./venv`

    - To activate the already created Virtual Environment
        - On Mac
            `source ./venv/bin/activate`
        - On Windows
            `python ./venv/Scripts/activate.bat` or `./venv/Scripts/activate.bat`

        (The path is a way of specifying which of your folders/project you need a Virtual Environment)
        if the path above don't work, do the absolute path e.g (c:/user/.../project_name/venv)

    - To delete a Virtual Environment, run the below command
        `deactivate`

    - PS: Ones Virtual Environment is activated you can run all commands with `pip3` as `pip` and `python3` as `python`
        e.g `python --version` will work

- To install Django
    - When using venv
        `pip install django`
    - When venv is not in use and python 3 upwards is installed in your PC
        `pip3 install django`

 - To get instruction on what django has out of the box, run
    `django-admin help`

- To start django project
    `django-admin startproject btre .` (The dot is for current directory)

- To get the list of commands that is supported in your django-admin project run
(DO NOT MODIFY YOUR `manage.py` file as it is a configuration file used inplace of Django Admin (since we currently are not using django admin for our project))
    `python manage.py help`

- To run your server, django project, locally
    `python manage.py runserver`

- Before you deploy your application, ensure to change `DEBUG = False` in `settings.py` only use `True` when running app locally

- `ALLOWED_HOSTS` in `settings.py` should list the domain name for your application

- To create pages in your Django app, run
    `python manage.py startapp pages`

- To create any static folder in your application which has been configured in `settings.py` and dumped in project namespace folder;
  run the below code
    `python manage.py collectstatic` (this create a static folder in your root directory)
    ENSURE TO ADD THE STATIC FOLDER GENERATED BY YOUR CODE ON THE ROOT DIRECTORY TO GITIGNORE

- To create pages/feature in your Django app, run
    `python manage.py startapp listings`

- If you newly installed
    - POSTGRESS APP from; https://postgresapp.com/downloads.html
        - initialize the application
        - click on 'postgres' (this inturn opens a terminal)
        - on the terminal run 
            - \password postgres
            - click enter and insert new password
        - create database using the below command
            `CREATE DATABASE DB_NAME OWNER postgres;` (the postgres is the name you just set password for when you typed `\password postgres`)
        - To get the list of databases (in the same postgres console/terminal) run
            `\l`
        - To exit the postgres terminal, run
            `\q`
    - POSTGRESS ADMIN from; https://www.pgadmin.org/
        - follow the installation wizard

- To install and setup progress in your Django project
    - ensure you are on your Virtual Environment (venv)
    - run the following commands
        - install/update postgress using brew (If you don't have it)
            `brew install postgresql`
        - `pip install psycopg2`
        - `pip install psycopg2-binary`
    - To setup postgresql
        - Navigate to settings.py; 
        - search for `DATABASES`
        - setup all your drivers; example for Django
            DATABASES = {
                "default": {
                    "ENGINE": "django.db.backends.postgresql",
                    "NAME": "[YOUR_DATABASE_NAME]",
                    "USER": "[YOUR_USER_NAME]",
                    "PASSWORD": "[YOUR_DATABASE_PASSWORD]",
                    "HOST": "localhost",
                    "PORT": "5432",
                }
            }
- Ensure you hide sensitive data in `.env` 
    e.g DB_PASSWORD=your_database_password

    - To access the sensitive data
        - Install python-decouple or django-environ to help manage your local Environment Variales; run
            `pip install python-decouple`
        - Access the Environment Variales with the below example
            from decouple import config

            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': 'your_database_name',
                    'USER': 'your_database_user',
                    'PASSWORD': config('DB_PASSWORD', default='default_password'),
                    'HOST': 'localhost',
                    'PORT': '5432',
                }
            }
        -Add .env to .gitignore Ensure the .env file is excluded from your repository:
            e.g # .gitignore
                .env


- To Migrate your database
    - What is migration - migrations are not unique to Django. The concept of migrations is widely used in many 
    frameworks and ORMs (Object-Relational Mappers) to manage changes to database schemas. 
    However, Django provides an automated and integrated system for handling migrations

    - To run and put Django default migration files into your application run
        `python manage.py migrate`

- To use `ImageField` model; ensure you have `Pillow` installed.
    `pip install Pillow`

- After creating your models (DB schemas; see for help: https://docs.djangoproject.com/en/5.1/ref/models/fields/)
    - Create a file that we can run to then update the database using the below command
        `python manage.py makemigrations`
    - Proceed to migrate the files to the DB using
        `python manage.py migrate`

- To check out what the query will look like, run the command
    `python manage.py sqlmigrate NAME_OF_MODULE_FOLDER MIGRATION_FILE_NUMBER` i.e `python manage.py sqlmigrate listings 0001`

- Django by default has a admin portal. This helps for application with no custom admin portal so that one can have access to feature/requirements that 
only an admin should mutate
    - To see the UI of the super admin. run your django server and navigate to `/admin`
    - To create the necessary credentials in order to have access run
        `python manage.py help`
    - under auth you will see the command needed to create a super admin. Therefor run the below command
        `python manage.py createsuperuser`

- To add your created models (information that can be saved in the database) into the admin portal (Django default admin)
    - Register your models on the admin.py (e.g for listings models, register it on listings' admin) by writing the below line of code
        `admin.site.register(MODEL_NAME)`

- From `settings.py` setup folder for images just as we did for static files. To do this
    - navigate to the bottom of `settings.py` file
    - insert the below code
        `MEDIA_ROOT = os.path.join(BASE_DIR, 'media')`
        `MEDIA_URL = '/media/'`
    - in your project core folder (e.g btre) i.e the folder where settings is,
        - navigate the the `urls.py` (which is a sibling of `settings.py`) and config to allow for media with the below code to the `urlpatterns` list
            `+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)`

- To customize Django admin portal
    - create a folder called `admin` in your template directory
    - create a HTML file in the admin folder called `base_site.html`

- To add more static file (just as we did previously)
    - Go to your ptoject config folder (btre)
    - Navigate to static and then the folder you want to access, in my case it is static -> css -> admin.css

- To modify and add columns to the default table that shows in Django admin
    - Go to the model folder into `admin.py` (in this case realtors or listings)
    - Create a class with parameters you need

- Install the dependence to help give django intellisense and not flag non-error data as error
    `pip install pylint-django`

    - Then in Visual Studio Code goto: User Settings (Ctrl + , or File > Preferences > Settings if available ) 
    Put in the following (please note the curly braces which are required for custom user settings.json in VSC):
        `"pylint.args": ["load-plugins=pylint_django"],`

- To fetch data from database and pass into your HTML
    - Go to the model folder into `views.py` (in this case realtors or listings)
    - receive the data you passed from the template

- To add a formatter for numbers which introduces comma after every 3 digit.
    - Go to `settings.py` -> `INSTALLED_APPS`
    - add to the list `'django.contrib.humanize'`
    - Go to the template where you want to use it and load it `{% load humanize %}`